package mushirih.pickup.pdf;


import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.os.Environment;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Date;

import mushirih.pickup.R;


/**
 * Created by p-tah on 14/06/2016.
 */
public class PDF {
    private static String FILE="TestPDF.pdf";
    Context context;
    Bitmap toBeInstantiatedLater,confirmation;

    private static Font catFont=new Font(Font.FontFamily.TIMES_ROMAN,18,Font.BOLD);
    private static Font redFont=new Font(Font.FontFamily.TIMES_ROMAN,12,Font.NORMAL, BaseColor.RED);
    private static Font subFont=new Font(Font.FontFamily.TIMES_ROMAN,16,Font.BOLD);
    private static Font smallFont=new Font(Font.FontFamily.TIMES_ROMAN,12,Font.BOLD);

    public PDF(Context myContext, Bitmap mBitmap, Bitmap confirmPic) throws IOException {
        Document document=new Document();
        context=myContext;
        toBeInstantiatedLater=mBitmap;
        confirmation=confirmPic;
        //toBeInstantiatedLater=new ImageView(context);
        //toBeInstantiatedLater.setImageResource(R.drawable.test);

        try {
            //MKDIR BEFORE THIS
            PdfWriter.getInstance(document, new FileOutputStream(Environment.getExternalStorageDirectory().toString() + "/KPMG KENYA/" + FILE));

            document.open();
            addMetaData(document);
            addTitlePage(document);
            addContent(document);
            document.close();
        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }
    private void addMetaData(Document document) {
        document.addTitle("PICK-UP PDF");
        document.addSubject("Expense Voucher+Contract");
        document.addKeywords("PICK-UP,Mushirih,Sign");
        document.addAuthor("Mushirih");
        document.addCreator("Mushirih");

    }

    private void addTitlePage(Document document) throws DocumentException, IOException {
        Paragraph preface=new Paragraph();

        addEmptyLine(preface, 1);

        preface.add(new Paragraph("Title of this doc", catFont));

        addEmptyLine(preface, 1);

        preface.add(new Paragraph("Report generated by : " + System.getProperty("user.name") + "," + new Date()  , smallFont));

        addEmptyLine(preface, 3);

        preface.add(new Paragraph("This document describes some transaction", smallFont));

        addEmptyLine(preface, 8);

        preface.add(new Paragraph("This document is legally privileged,rights owned by Mushirih", redFont));


        document.add(preface);

        document.add(getStaticImage());
        document.add(getDynamicImage(toBeInstantiatedLater));
        document.add(getDynamicImage(confirmation));

        document.newPage();
    }

    private Image getStaticImage() throws BadElementException, IOException {


        Drawable d= context.getResources().getDrawable(R.drawable.test);
        BitmapDrawable bitmapDrawable= (BitmapDrawable) d;
        Bitmap bitmap=bitmapDrawable.getBitmap();
        ByteArrayOutputStream stream=new ByteArrayOutputStream();
        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);
        return Image.getInstance(stream.toByteArray());
    }




    private Image getDynamicImage(Bitmap view) throws BadElementException, IOException {
       // BitmapDrawable drawable= (BitmapDrawable) view.getDrawable();
        Bitmap bitmap=view;

        ByteArrayOutputStream stream=new ByteArrayOutputStream();
        bitmap.compress(Bitmap.CompressFormat.PNG,100,stream);
        byte[] imageByte=stream.toByteArray();
        Image image=Image.getInstance(imageByte);
        return image;
    }

    private void addContent(Document document) throws DocumentException{
        Anchor anchor=new Anchor("First Section",catFont);
        anchor.setName("First Section");

        Chapter catPart=new Chapter(new Paragraph(anchor),1);

        Paragraph subParagraph=new Paragraph("SubCategory 1",subFont);
        Section subCatPat=catPart.addSection(subParagraph);
        subCatPat.add(new Paragraph("Hello"));

        subParagraph=new Paragraph("SubCategory 2",subFont);
        subCatPat=catPart.addSection(subParagraph);
        subCatPat.add(new Paragraph("Paragraph 1"));
        subCatPat.add(new Paragraph("Paragraph 2"));
        subCatPat.add(new Paragraph("Paragraph 3"));

        //LISTIE
        createList(subCatPat);
        Paragraph paragraph=new Paragraph();
        addEmptyLine(paragraph, 5);

        subCatPat.add(paragraph);
//TBL
        createTable(subCatPat);
        //add above
        document.add(catPart);

        //nxt sxtn
        anchor =new Anchor("Second Section",catFont);
        anchor.setName("Second Section");

        catPart =new Chapter(new Paragraph(anchor),1);

        subParagraph=new Paragraph("SubCategory",subFont);
        subCatPat=catPart.addSection(subParagraph);

        subCatPat.add(new Paragraph("Watch this space"));
        document.add(catPart);


    }

    private void createTable(Section subCatPat) throws BadElementException {
        PdfPTable table=new PdfPTable(3);

        PdfPCell c1=new PdfPCell(new Phrase("Table Header 1"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        //table.addCell(Image.getInstance());
        c1=new PdfPCell(new Phrase("Table Header 2"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1=new PdfPCell(new Phrase("Table Header 3"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);

        table.addCell("1.0");
        table.addCell("1.1");
        table.addCell("1.2");
        table.addCell("2.1");
        table.addCell("2.2");
        table.addCell("2.3");

        subCatPat.add(table);

    }

    private void createList(Section subCatPat) {
        List list=new List(true,true,10);
        list.add(new ListItem("First Item"));
        list.add(new ListItem("Second Item"));
        list.add(new ListItem("Third Item"));
        list.add(new ListItem("N-th item"));

        subCatPat.add(list);
    }

    private void addEmptyLine(Paragraph preface, int i) {
        for(int k=0;k<=i;k++){
            preface.add(new Paragraph(""));
        }

    }






}
